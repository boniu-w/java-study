  
  
  --------所有整型包装类对象之间值的比较，全部使用 equals 方法比较。-----------------------------------
	说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在 IntegerCache.cache 产
	生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数
	据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。
	
  ----------浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals 来判断-----------
	反例：
	 float a = 1.0f - 0.9f;
	 float b = 0.9f - 0.8f;
	 if (a == b) {
	 // 预期进入此代码快，执行其它业务逻辑
	 // 但事实上 a==b 的结果为 false
	 }
	 Float x = Float.valueOf(a);
	 Float y = Float.valueOf(b);
	 if (x.equals(y)) {
	 // 预期进入此代码快，执行其它业务逻辑
	 // 但事实上 equals 的结果为 false
	 }
	 
  ------循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。-------------
	说明：下例中，反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行
	append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。
	
	反例：
	String str = "start"; 
	for (int i = 0; i < 100; i++) { 
	str = str + "hello"; 
	}
